---
# Webserver role tasks
# Demonstrates role-based patterns that benefit from lint rule flexibility

- name: Install web server packages
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ webserver_packages }}"
  
# Task without explicit name (demonstrates name[missing] flexibility)
- package:
    name: nginx
    state: present
  when: webserver_type == "nginx"

- name: Configure web server
  template:
    src: "{{ webserver_type }}.conf.j2"
    dest: "{{ webserver_config_path }}"
    backup: yes
  notify: restart webserver

# Using shell command for complex operations (command-instead-of-module flexibility)
- name: Check web server configuration syntax
  shell: |
    {% if webserver_type == "nginx" %}
    nginx -t
    {% elif webserver_type == "apache" %}
    apache2ctl configtest
    {% endif %}
  register: config_test
  changed_when: false
  failed_when: config_test.rc != 0

# Long line demonstrating yaml[line-length] flexibility
- name: Create web server virtual host configuration with very long path and multiple parameters
  template:
    src: vhost.conf.j2
    dest: "{{ webserver_vhost_path }}/{{ item.name }}.conf"
    owner: "{{ webserver_user }}"
    group: "{{ webserver_group }}"
    mode: '0644'
  loop: "{{ webserver_vhosts }}"
  notify: restart webserver

# Flexible variable naming (var-naming flexibility)
- name: Set custom variables
  set_fact:
    WebServer_Status: "configured"
    web_server_version: "{{ ansible_facts.packages[webserver_package][0].version }}"
    webserver_FQDN: "{{ ansible_fqdn }}"

# Complex Jinja2 expressions (jinja[invalid] flexibility)
- name: Generate dynamic configuration
  template:
    src: dynamic.conf.j2
    dest: /etc/webserver/dynamic.conf
    content: |
      {% for host in groups['webservers'] %}
      {% if hostvars[host]['ansible_default_ipv4']['address'] is defined %}
      server {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ http_port | default(80) }};
      {% endif %}
      {% endfor %}
  notify: restart webserver

# Using ignore_errors for non-critical operations
- name: Clean up temporary files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/webserver_install.log
    - /tmp/webserver_config.tmp
  ignore_errors: yes

# Handler dependency (handler-depends-on flexibility)
- name: Ensure web server is running
  service:
    name: "{{ webserver_service }}"
    state: started
    enabled: yes
  notify:
    - restart webserver
    - reload webserver